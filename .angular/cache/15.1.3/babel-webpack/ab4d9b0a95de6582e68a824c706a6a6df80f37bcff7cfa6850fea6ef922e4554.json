{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { GLOBAL } from \"./global\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(_http) {\n    this._http = _http;\n    this.url = GLOBAL.url;\n  }\n  pruebas() {\n    return 'Hola mundo desde USERRRR';\n  }\n  register(user) {\n    let json = JSON.stringify(user);\n    let params = 'json=' + json;\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n    return this._http.post(this.url + 'register', params, {\n      headers: headers\n    });\n  }\n  signup(user, gettoken = '') {\n    // if(gettoken != ''){\n    //   user.gettoken = 'true';\n    // }\n    let json = JSON.stringify(user);\n    let params = 'json=' + json;\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n    return this._http.post(this.url + 'login', params, {\n      headers: headers\n    });\n  }\n  getIdentity() {\n    let identity = JSON.parse(localStorage.getItem('identity') || '{}');\n    if (identity != \"undefined\") {\n      this.identity = identity;\n    } else {\n      this.identity = null;\n    }\n    return this.identity;\n  }\n  getToken() {\n    let token = localStorage.getItem('token');\n    if (token != \"undefined\") {\n      this.token = token;\n    } else {\n      this.token = null;\n    }\n    return this.token;\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,MAAM,QAAQ,UAAU;;;AAMjC,OAAM,MAAOC,WAAW;EAOtBC,YACSC,KAAiB;IAAjB,UAAK,GAALA,KAAK;IAEZ,IAAI,CAACC,GAAG,GAAGJ,MAAM,CAACI,GAAG;EACvB;EAGAC,OAAO;IACL,OAAO,0BAA0B;EACnC;EAGAC,QAAQ,CAACC,IAAS;IAEhB,IAAIC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;IAE/B,IAAII,MAAM,GAAG,OAAO,GAACH,IAAI;IAEzB,IAAII,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC;IAExF,OAAO,IAAI,CAACV,KAAK,CAACW,IAAI,CAAC,IAAI,CAACV,GAAG,GAAC,UAAU,EAAEO,MAAM,EAAE;MAACC,OAAO,EAAEA;IAAO,CAAC,CAAC;EAEzE;EAGAG,MAAM,CAACR,IAAS,EAAES,WAAe,EAAE;IAEjC;IACA;IACA;IAEA,IAAIR,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;IAE/B,IAAII,MAAM,GAAG,OAAO,GAACH,IAAI;IAEzB,IAAII,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC;IAExF,OAAO,IAAI,CAACV,KAAK,CAACW,IAAI,CAAC,IAAI,CAACV,GAAG,GAAC,OAAO,EAAEO,MAAM,EAAE;MAACC,OAAO,EAAEA;IAAO,CAAC,CAAC;EAEtE;EAGAK,WAAW;IACT,IAAIC,QAAQ,GAAGT,IAAI,CAACU,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;IAGnE,IAAGH,QAAQ,IAAI,WAAW,EAAC;MACzB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;KACzB,MAAI;MACH,IAAI,CAACA,QAAQ,GAAG,IAAI;;IAGtB,OAAO,IAAI,CAACA,QAAQ;EAGtB;EAGAI,QAAQ;IAEN,IAAIC,KAAK,GAAGH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAEzC,IAAGE,KAAK,IAAI,WAAW,EAAC;MACtB,IAAI,CAACA,KAAK,GAAGA,KAAK;KACnB,MAAI;MACH,IAAI,CAACA,KAAK,GAAG,IAAI;;IAGnB,OAAO,IAAI,CAACA,KAAK;EAGnB;;AA9EWtB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;AAAA","names":["HttpHeaders","GLOBAL","UserService","constructor","_http","url","pruebas","register","user","json","JSON","stringify","params","headers","set","post","signup","gettoken","getIdentity","identity","parse","localStorage","getItem","getToken","token","factory"],"sourceRoot":"","sources":["C:\\wamp\\www\\Mejora_Soluciones\\client-angular\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { GLOBAL } from \"./global\";\r\nimport { User } from \"../models/user\";\r\n\r\n\r\n@Injectable()\r\n\r\nexport class UserService {\r\n  public url: string;\r\n\r\n  public token: any;\r\n  public identity: any;\r\n\r\n\r\n  constructor(\r\n    public _http: HttpClient\r\n  ){\r\n    this.url = GLOBAL.url\r\n  }\r\n\r\n\r\n  pruebas(){\r\n    return 'Hola mundo desde USERRRR';\r\n  }\r\n\r\n\r\n  register(user: any):Observable<any>{\r\n\r\n    let json = JSON.stringify(user);\r\n\r\n    let params = 'json='+json;\r\n\r\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n    return this._http.post(this.url+'register', params, {headers: headers});\r\n\r\n  }\r\n\r\n\r\n  signup(user: any, gettoken:any = ''):Observable<any>{\r\n\r\n    // if(gettoken != ''){\r\n    //   user.gettoken = 'true';\r\n    // }\r\n\r\n    let json = JSON.stringify(user);\r\n\r\n    let params = 'json='+json;\r\n\r\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n    return this._http.post(this.url+'login', params, {headers: headers});\r\n\r\n  }\r\n\r\n\r\n  getIdentity(){\r\n    let identity = JSON.parse(localStorage.getItem('identity') || '{}');\r\n\r\n\r\n    if(identity != \"undefined\"){\r\n      this.identity = identity;\r\n    }else{\r\n      this.identity = null;\r\n    }\r\n\r\n    return this.identity;\r\n\r\n\r\n  }\r\n\r\n\r\n  getToken(){\r\n\r\n    let token = localStorage.getItem('token');\r\n\r\n    if(token != \"undefined\"){\r\n      this.token = token;\r\n    }else{\r\n      this.token = null;\r\n    }\r\n\r\n    return this.token;\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}