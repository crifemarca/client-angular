{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { User } from \"src/app/models/user\";\nimport { UserService } from \"src/app/services/user.service\";\nlet LoginComponent = class LoginComponent {\n  constructor(_route, _router, _userService) {\n    this._route = _route;\n    this._router = _router;\n    this._userService = _userService;\n    this.status = '';\n    this.title = 'Identificate';\n    this.user = new User(1, 'ROLE_USER', '', '', '', '');\n  }\n  ngOnInit() {\n    let user = this._userService.getIdentity();\n    this.logout();\n  }\n  onSubmit(form) {\n    this._userService.signup(this.user).subscribe(response => {\n      if (response.token != 'error') {\n        this.status = response.status;\n        this.token = response.token;\n        localStorage.setItem('token', this.token);\n        this._userService.signup(this.user, true).subscribe(response => {\n          this.status = response.status;\n          this.identity = response.token;\n          localStorage.setItem('identity', JSON.stringify(this.identity));\n          this._router.navigate(['inicio']);\n        }, error => {\n          console.log(error);\n        });\n      } else {\n        this.status = 'error';\n      }\n    }, error => {\n      console.log(error);\n    });\n  }\n  logout() {\n    this._route.params.subscribe(params => {\n      let logout = +params['sure'];\n      if (logout == 1) {\n        localStorage.removeItem('identity');\n        localStorage.removeItem('token');\n        this.identity = '';\n        this.token = '';\n        this._router.navigate(['inicio']);\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'login',\n  templateUrl: 'login.component.html',\n  providers: [UserService]\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAASC,IAAI,QAAQ,qBAAqB;AAE1C,SAASC,WAAW,QAAQ,+BAA+B;AAUpD,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAQzBC,YACUC,MAAsB,EACtBC,OAAe,EACfC,YAAyB;IAFzB,WAAM,GAANF,MAAM;IACN,YAAO,GAAPC,OAAO;IACP,iBAAY,GAAZC,YAAY;IAPf,WAAM,GAAW,EAAE;IASxB,IAAI,CAACC,KAAK,GAAG,cAAc;IAC3B,IAAI,CAACC,IAAI,GAAG,IAAIR,IAAI,CAAC,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACtD;EAGAS,QAAQ;IAEN,IAAID,IAAI,GAAG,IAAI,CAACF,YAAY,CAACI,WAAW,EAAE;IAC1C,IAAI,CAACC,MAAM,EAAE;EAEf;EAGAC,QAAQ,CAACC,IAAS;IAEhB,IAAI,CAACP,YAAY,CAACQ,MAAM,CAAC,IAAI,CAACN,IAAI,CAAC,CAACO,SAAS,CAE3CC,QAAQ,IAAG;MAET,IAAGA,QAAQ,CAACC,KAAK,IAAI,OAAO,EAAC;QAE3B,IAAI,CAACC,MAAM,GAAGF,QAAQ,CAACE,MAAM;QAC7B,IAAI,CAACD,KAAK,GAAGD,QAAQ,CAACC,KAAK;QAE3BE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAE,IAAI,CAACH,KAAK,CAAC;QAEzC,IAAI,CAACX,YAAY,CAACQ,MAAM,CAAC,IAAI,CAACN,IAAI,EAAE,IAAI,CAAC,CAACO,SAAS,CAEjDC,QAAQ,IAAG;UAET,IAAI,CAACE,MAAM,GAAGF,QAAQ,CAACE,MAAM;UAC7B,IAAI,CAACG,QAAQ,GAAGL,QAAQ,CAACC,KAAK;UAE9BE,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEE,IAAI,CAACC,SAAS,CAAC,IAAI,CAACF,QAAQ,CAAC,CAAC;UAE/D,IAAI,CAAChB,OAAO,CAACmB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAEnC,CAAC,EACDC,KAAK,IAAG;UACNC,OAAO,CAACC,GAAG,CAAMF,KAAK,CAAC;QACzB,CAAC,CACF;OAEF,MAAI;QAEH,IAAI,CAACP,MAAM,GAAG,OAAO;;IAIzB,CAAC,EACDO,KAAK,IAAG;MACNC,OAAO,CAACC,GAAG,CAAMF,KAAK,CAAC;IACzB,CAAC,CACF;EACH;EAEAd,MAAM;IACJ,IAAI,CAACP,MAAM,CAACwB,MAAM,CAACb,SAAS,CAACa,MAAM,IAAG;MAEpC,IAAIjB,MAAM,GAAG,CAACiB,MAAM,CAAC,MAAM,CAAC;MAE5B,IAAIjB,MAAM,IAAI,CAAC,EAAE;QACfQ,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC;QACnCV,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;QAEhC,IAAI,CAACR,QAAQ,GAAG,EAAE;QAClB,IAAI,CAACJ,KAAK,GAAG,EAAE;QAEf,IAAI,CAACZ,OAAO,CAACmB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;IAIrC,CAAC,CAAC;EAEJ;CAED;AAzFYtB,cAAc,eAR1BH,SAAS,CAAC;EAET+B,QAAQ,EAAE,OAAO;EACjBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC/B,WAAW;CAExB,CAAC,GAEWC,cAAc,CAyF1B;SAzFYA,cAAc","names":["Component","User","UserService","LoginComponent","constructor","_route","_router","_userService","title","user","ngOnInit","getIdentity","logout","onSubmit","form","signup","subscribe","response","token","status","localStorage","setItem","identity","JSON","stringify","navigate","error","console","log","params","removeItem","selector","templateUrl","providers"],"sourceRoot":"","sources":["C:\\wamp\\www\\Mejora_Soluciones\\client-angular\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { Router, ActivatedRoute, Params } from \"@angular/router\";\r\nimport { User } from \"src/app/models/user\";\r\n\r\nimport { UserService } from \"src/app/services/user.service\";\r\n\r\n@Component({\r\n\r\n  selector: 'login',\r\n  templateUrl: 'login.component.html',\r\n  providers: [UserService]\r\n\r\n})\r\n\r\nexport class LoginComponent implements OnInit{\r\n\r\n  public title: string;\r\n  public user:User;\r\n  public status: string = '';\r\n  public token: any;\r\n  public identity: any;\r\n\r\n  constructor(\r\n    private _route: ActivatedRoute,\r\n    private _router: Router,\r\n    private _userService: UserService\r\n  ){\r\n    this.title = 'Identificate';\r\n    this.user = new User(1, 'ROLE_USER', '', '', '', '');\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n    let user = this._userService.getIdentity();\r\n    this.logout();\r\n\r\n  }\r\n\r\n\r\n  onSubmit(form: any){\r\n\r\n    this._userService.signup(this.user).subscribe(\r\n\r\n      response => {\r\n\r\n        if(response.token != 'error'){\r\n\r\n          this.status = response.status;\r\n          this.token = response.token;\r\n\r\n          localStorage.setItem('token', this.token);\r\n\r\n          this._userService.signup(this.user, true).subscribe(\r\n\r\n            response => {\r\n\r\n              this.status = response.status;\r\n              this.identity = response.token;\r\n\r\n              localStorage.setItem('identity', JSON.stringify(this.identity));\r\n\r\n              this._router.navigate(['inicio']);\r\n\r\n            },\r\n            error => {\r\n              console.log(<any>error);\r\n            }\r\n          )\r\n\r\n        }else{\r\n\r\n          this.status = 'error';\r\n\r\n        }\r\n\r\n      },\r\n      error => {\r\n        console.log(<any>error);\r\n      }\r\n    )\r\n  }\r\n\r\n  logout(){\r\n    this._route.params.subscribe(params => {\r\n\r\n      let logout = +params['sure'];\r\n\r\n      if( logout == 1 ){\r\n        localStorage.removeItem('identity');\r\n        localStorage.removeItem('token');\r\n\r\n        this.identity = '';\r\n        this.token = '';\r\n\r\n        this._router.navigate(['inicio']);\r\n\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}