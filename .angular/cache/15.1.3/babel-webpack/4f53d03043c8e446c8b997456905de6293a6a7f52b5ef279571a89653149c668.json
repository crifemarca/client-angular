{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { GLOBAL } from \"./global\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n//import { User } from \"../models/user\";\nexport class UserService {\n  constructor(_http) {\n    this._http = _http;\n    this.url = GLOBAL.url;\n  }\n  /**\r\n   * Registra un usuario\r\n   *\r\n   * @param any user\r\n   * Observable\r\n   * @autor Christian Felipe Martinez Castaño\r\n   *\r\n   */\n  register(user) {\n    console.log(\"useriuoooooooooooooooo \", user);\n    // let json = JSON.stringify(user);\n    //let params = 'json='+json;\n    let name = 'name=' + user.name;\n    let surname = 'surname=' + user.surname;\n    let email = 'email=' + user.email;\n    let password = 'password=' + user.password;\n    let params = name + ',' + surname + ',' + email + ',' + password;\n    console.log(params);\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n    return this._http.post(this.url + 'register', params, {\n      headers: headers\n    });\n  }\n  /**\r\n   * valida credenciales de un usuario y retorna el token o la data del usuario\r\n   *\r\n   * @param any user\r\n   * @param any gettoken\r\n   * Observable\r\n   * @autor Christian Felipe Martinez Castaño\r\n   *\r\n   */\n  signup(user, gettoken = '') {\n    if (gettoken != '') {\n      user.gettoken = 'true';\n    } else {\n      user.gettoken = gettoken;\n    }\n    let json = JSON.stringify(user);\n    let params = 'json=' + json;\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n    return this._http.post(this.url + 'login', params, {\n      headers: headers\n    });\n  }\n  /**\r\n   * Registra el localStorage de la data del usuario\r\n   *\r\n   * @autor Christian Felipe Martinez Castaño\r\n   *\r\n   */\n  getIdentity() {\n    let identity = JSON.parse(localStorage.getItem('identity') || '{}');\n    if (identity != \"undefined\") {\n      this.identity = identity;\n    } else {\n      this.identity = null;\n    }\n    return this.identity;\n  }\n  /**\r\n   * Registra el localStorage del token\r\n   *\r\n   * @autor Christian Felipe Martinez Castaño\r\n   *\r\n   */\n  getToken() {\n    let token = localStorage.getItem('token');\n    if (token != \"undefined\") {\n      this.token = token;\n    } else {\n      this.token = null;\n    }\n    return this.token;\n  }\n  /**\r\n  * Consume el API, retorna los productos de un usuario\r\n  *\r\n  * @param any token\r\n  * @param any id\r\n  * Observable\r\n  * @autor Christian Felipe Martinez Castaño\r\n  *\r\n  */\n  getUserProduct(token, id) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);\n    return this._http.get(this.url + 'user-producto/' + id, {\n      headers: headers\n    });\n  }\n  /**\r\n   * Consume el API, retorna todos los usuarios\r\n   *\r\n   * @param any token\r\n   * Observable\r\n   * @autor Christian Felipe Martinez Castaño\r\n   *\r\n   */\n  getUserAll(token) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);\n    return this._http.get(this.url + 'userAll', {\n      headers: headers\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","GLOBAL","UserService","constructor","_http","url","register","user","console","log","name","surname","email","password","params","headers","set","post","signup","gettoken","json","JSON","stringify","getIdentity","identity","parse","localStorage","getItem","getToken","token","getUserProduct","id","get","getUserAll","factory"],"sourceRoot":"","sources":["C:\\wamp\\www\\Mejora_Soluciones\\client-angular\\src\\app\\services\\user.service.ts"],"sourcesContent":["/**\r\n *\r\n * @autor Christian Felipe Martinez Castaño\r\n * 2023\r\n *\r\n */\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { GLOBAL } from \"./global\";\r\n//import { User } from \"../models/user\";\r\n\r\n@Injectable()\r\n\r\nexport class UserService {\r\n  public url: string;\r\n\r\n  public token: any;\r\n  public identity: any;\r\n\r\n  constructor(\r\n    public _http: HttpClient\r\n  ){\r\n    this.url = GLOBAL.url\r\n  }\r\n\r\n  /**\r\n   * Registra un usuario\r\n   *\r\n   * @param any user\r\n   * Observable\r\n   * @autor Christian Felipe Martinez Castaño\r\n   *\r\n   */\r\n\r\n  register(user: any):Observable<any>{\r\n\r\n\r\n\r\n    console.log(\"useriuoooooooooooooooo \", user);\r\n\r\n   // let json = JSON.stringify(user);\r\n    //let params = 'json='+json;\r\n\r\n    let name = 'name='+user.name;\r\n    let surname = 'surname='+user.surname;\r\n    let email = 'email='+user.email;\r\n    let password = 'password='+user.password;\r\n\r\n    let params = name + ',' + surname + ',' + email + ',' + password;\r\n\r\n\r\n    console.log(params);\r\n\r\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n    return this._http.post(this.url+'register', params, {headers: headers});\r\n\r\n  }\r\n\r\n  /**\r\n   * valida credenciales de un usuario y retorna el token o la data del usuario\r\n   *\r\n   * @param any user\r\n   * @param any gettoken\r\n   * Observable\r\n   * @autor Christian Felipe Martinez Castaño\r\n   *\r\n   */\r\n  signup(user: any, gettoken:any = ''):Observable<any>{\r\n\r\n    if(gettoken != ''){\r\n      user.gettoken = 'true';\r\n    }else{\r\n      user.gettoken = gettoken;\r\n    }\r\n\r\n    let json = JSON.stringify(user);\r\n    let params = 'json='+json;\r\n\r\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n    return this._http.post(this.url+'login', params, {headers: headers});\r\n\r\n  }\r\n\r\n  /**\r\n   * Registra el localStorage de la data del usuario\r\n   *\r\n   * @autor Christian Felipe Martinez Castaño\r\n   *\r\n   */\r\n  getIdentity(){\r\n\r\n    let identity = JSON.parse(localStorage.getItem('identity') || '{}');\r\n\r\n    if(identity != \"undefined\"){\r\n      this.identity = identity;\r\n    }else{\r\n      this.identity = null;\r\n    }\r\n    return this.identity;\r\n  }\r\n\r\n  /**\r\n   * Registra el localStorage del token\r\n   *\r\n   * @autor Christian Felipe Martinez Castaño\r\n   *\r\n   */\r\n  getToken(){\r\n\r\n    let token = localStorage.getItem('token');\r\n\r\n    if(token != \"undefined\"){\r\n      this.token = token;\r\n    }else{\r\n      this.token = null;\r\n    }\r\n    return this.token;\r\n  }\r\n\r\n   /**\r\n   * Consume el API, retorna los productos de un usuario\r\n   *\r\n   * @param any token\r\n   * @param any id\r\n   * Observable\r\n   * @autor Christian Felipe Martinez Castaño\r\n   *\r\n   */\r\n\r\n    getUserProduct(token:any, id:any):Observable<any>{\r\n\r\n      let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\r\n                                     .set('Authorization', token);\r\n\r\n      return this._http.get(this.url + 'user-producto/' + id,  {headers: headers});\r\n\r\n    }\r\n\r\n  /**\r\n   * Consume el API, retorna todos los usuarios\r\n   *\r\n   * @param any token\r\n   * Observable\r\n   * @autor Christian Felipe Martinez Castaño\r\n   *\r\n   */\r\n\r\n    getUserAll(token:any):Observable<any>{\r\n\r\n      let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\r\n                                      .set('Authorization', token);\r\n\r\n      return this._http.get(this.url + 'userAll',  {headers: headers});\r\n\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}